/*
 TicTacToe is fun :(
 */

import java.awt.*;
import java.awt.event.*;

public class TicTacToe extends Frame implements ActionListener {
    private Button[][] buttons;
    private boolean isPlayer1Turn = true;
    private Label statusLabel;

    public TicTacToe() {
        setTitle("Tic Tac Toe");
        setSize(500, 500);
        setLayout(new GridLayout(4, 3));
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent windowEvent) {
                System.exit(0);
            }
        });

        buttons = new Button[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new Button("");
                buttons[i][j].setFont(new Font("Arial", Font.PLAIN, 50));
                buttons[i][j].addActionListener(this);
                add(buttons[i][j]);
            }
        }

        Button newGameButton = new Button("New Game");
        newGameButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                resetGame();
            }
        });
        add(newGameButton);

        statusLabel = new Label("Player 1's turn");
        add(statusLabel);

        setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        Button clickedButton = (Button)e.getSource();
        if (!clickedButton.getLabel().isEmpty()) {
            return;
        }

        if (isPlayer1Turn) {
            clickedButton.setLabel("X");
            statusLabel.setText("Your  turn");
        } else {
            clickedButton.setLabel("O");
            statusLabel.setText("Player 1's turn");
        }

        if (checkWinner()) {
            String winner = isPlayer1Turn ? "Player 1" : "Player 2";
            statusLabel.setText(winner + " wins!");
            disableButtons();
        } else if (isBoardFull()) {
            statusLabel.setText("It's a draw!");
            disableButtons();
        } else {
            isPlayer1Turn = !isPlayer1Turn;
        }
    }

    private boolean checkWinner() {
        String[][] board = new String[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = buttons[i][j].getLabel();
            }
        }

        // Check rows
        for (int i = 0; i < 3; i++) {
            if (board[i][0].equals(board[i][1]) && board[i][1].equals(board[i][2]) && !board[i][0].isEmpty()) {
                return true;
            }
        }

        // Check columns
        for (int j = 0; j < 3; j++) {
            if (board[0][j].equals(board[1][j]) && board[1][j].equals(board[2][j]) && !board[0][j].isEmpty()) {
                return true;
            }
        }

        // Check diagonals
        if ((board[0][0].equals(board[1][1]) && board[1][1].equals(board[2][2]) && !board[0][0].isEmpty()) ||
                (board[0][2].equals(board[1][1]) && board[1][1].equals(board[2][0]) && !board[0][2].isEmpty())) {
            return true;
        }

        return false;
    }

    private boolean isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (buttons[i][j].getLabel().isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private void disableButtons() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setEnabled(false);
            }
        }
    }

    private void resetGame() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setLabel("");
                buttons[i][j].setEnabled(true);
            }
        }
        isPlayer1Turn = true;
        statusLabel.setText("Player 1's turn. Good luck!");
    }

    public static void main(String[] args) {
        new TicTacToe();
    }
}
